// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dose-to-points-data.proto

#ifndef PROTOBUF_dose_2dto_2dpoints_2ddata_2eproto__INCLUDED
#define PROTOBUF_dose_2dto_2dpoints_2ddata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ProtoFileGenerator {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
void protobuf_AssignDesc_dose_2dto_2dpoints_2ddata_2eproto();
void protobuf_ShutdownFile_dose_2dto_2dpoints_2ddata_2eproto();

class Beam;
class Beamlet;
class BeamletDose;
class DoseToPointsData;
class Point;
class PointDose;
class Structure;

// ===================================================================

class Beam : public ::google::protobuf::Message {
 public:
  Beam();
  virtual ~Beam();

  Beam(const Beam& from);

  inline Beam& operator=(const Beam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Beam& default_instance();

  void Swap(Beam* other);

  // implements Message ----------------------------------------------

  Beam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Beam& from);
  void MergeFrom(const Beam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional double JawX1 = 2 [default = 0];
  inline bool has_jawx1() const;
  inline void clear_jawx1();
  static const int kJawX1FieldNumber = 2;
  inline double jawx1() const;
  inline void set_jawx1(double value);

  // optional double JawX2 = 3 [default = 0];
  inline bool has_jawx2() const;
  inline void clear_jawx2();
  static const int kJawX2FieldNumber = 3;
  inline double jawx2() const;
  inline void set_jawx2(double value);

  // optional double JawY1 = 4 [default = 0];
  inline bool has_jawy1() const;
  inline void clear_jawy1();
  static const int kJawY1FieldNumber = 4;
  inline double jawy1() const;
  inline void set_jawy1(double value);

  // optional double JawY2 = 5 [default = 0];
  inline bool has_jawy2() const;
  inline void clear_jawy2();
  static const int kJawY2FieldNumber = 5;
  inline double jawy2() const;
  inline void set_jawy2(double value);

  // optional int32 StartBeamletIndex = 6 [default = 0];
  inline bool has_startbeamletindex() const;
  inline void clear_startbeamletindex();
  static const int kStartBeamletIndexFieldNumber = 6;
  inline ::google::protobuf::int32 startbeamletindex() const;
  inline void set_startbeamletindex(::google::protobuf::int32 value);

  // optional int32 EndBeamletIndex = 7 [default = 0];
  inline bool has_endbeamletindex() const;
  inline void clear_endbeamletindex();
  static const int kEndBeamletIndexFieldNumber = 7;
  inline ::google::protobuf::int32 endbeamletindex() const;
  inline void set_endbeamletindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoFileGenerator.Beam)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_jawx1();
  inline void clear_has_jawx1();
  inline void set_has_jawx2();
  inline void clear_has_jawx2();
  inline void set_has_jawy1();
  inline void clear_has_jawy1();
  inline void set_has_jawy2();
  inline void clear_has_jawy2();
  inline void set_has_startbeamletindex();
  inline void clear_has_startbeamletindex();
  inline void set_has_endbeamletindex();
  inline void clear_has_endbeamletindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  double jawx1_;
  double jawx2_;
  double jawy1_;
  double jawy2_;
  ::google::protobuf::int32 startbeamletindex_;
  ::google::protobuf::int32 endbeamletindex_;
  friend void  protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_AssignDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_ShutdownFile_dose_2dto_2dpoints_2ddata_2eproto();

  void InitAsDefaultInstance();
  static Beam* default_instance_;
};
// -------------------------------------------------------------------

class Beamlet : public ::google::protobuf::Message {
 public:
  Beamlet();
  virtual ~Beamlet();

  Beamlet(const Beamlet& from);

  inline Beamlet& operator=(const Beamlet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Beamlet& default_instance();

  void Swap(Beamlet* other);

  // implements Message ----------------------------------------------

  Beamlet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Beamlet& from);
  void MergeFrom(const Beamlet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Index = 1 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional string BeamId = 2;
  inline bool has_beamid() const;
  inline void clear_beamid();
  static const int kBeamIdFieldNumber = 2;
  inline const ::std::string& beamid() const;
  inline void set_beamid(const ::std::string& value);
  inline void set_beamid(const char* value);
  inline void set_beamid(const char* value, size_t size);
  inline ::std::string* mutable_beamid();
  inline ::std::string* release_beamid();
  inline void set_allocated_beamid(::std::string* beamid);

  // optional double XSize = 3 [default = 0];
  inline bool has_xsize() const;
  inline void clear_xsize();
  static const int kXSizeFieldNumber = 3;
  inline double xsize() const;
  inline void set_xsize(double value);

  // optional double YSize = 4 [default = 0];
  inline bool has_ysize() const;
  inline void clear_ysize();
  static const int kYSizeFieldNumber = 4;
  inline double ysize() const;
  inline void set_ysize(double value);

  // optional double XStart = 5 [default = 0];
  inline bool has_xstart() const;
  inline void clear_xstart();
  static const int kXStartFieldNumber = 5;
  inline double xstart() const;
  inline void set_xstart(double value);

  // optional double YStart = 6 [default = 0];
  inline bool has_ystart() const;
  inline void clear_ystart();
  static const int kYStartFieldNumber = 6;
  inline double ystart() const;
  inline void set_ystart(double value);

  // @@protoc_insertion_point(class_scope:ProtoFileGenerator.Beamlet)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_beamid();
  inline void clear_has_beamid();
  inline void set_has_xsize();
  inline void clear_has_xsize();
  inline void set_has_ysize();
  inline void clear_has_ysize();
  inline void set_has_xstart();
  inline void clear_has_xstart();
  inline void set_has_ystart();
  inline void clear_has_ystart();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* beamid_;
  double xsize_;
  double ysize_;
  double xstart_;
  double ystart_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_AssignDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_ShutdownFile_dose_2dto_2dpoints_2ddata_2eproto();

  void InitAsDefaultInstance();
  static Beamlet* default_instance_;
};
// -------------------------------------------------------------------

class BeamletDose : public ::google::protobuf::Message {
 public:
  BeamletDose();
  virtual ~BeamletDose();

  BeamletDose(const BeamletDose& from);

  inline BeamletDose& operator=(const BeamletDose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeamletDose& default_instance();

  void Swap(BeamletDose* other);

  // implements Message ----------------------------------------------

  BeamletDose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeamletDose& from);
  void MergeFrom(const BeamletDose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Index = 1 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional double Dose = 2 [default = 0];
  inline bool has_dose() const;
  inline void clear_dose();
  static const int kDoseFieldNumber = 2;
  inline double dose() const;
  inline void set_dose(double value);

  // @@protoc_insertion_point(class_scope:ProtoFileGenerator.BeamletDose)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_dose();
  inline void clear_has_dose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double dose_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_AssignDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_ShutdownFile_dose_2dto_2dpoints_2ddata_2eproto();

  void InitAsDefaultInstance();
  static BeamletDose* default_instance_;
};
// -------------------------------------------------------------------

class DoseToPointsData : public ::google::protobuf::Message {
 public:
  DoseToPointsData();
  virtual ~DoseToPointsData();

  DoseToPointsData(const DoseToPointsData& from);

  inline DoseToPointsData& operator=(const DoseToPointsData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DoseToPointsData& default_instance();

  void Swap(DoseToPointsData* other);

  // implements Message ----------------------------------------------

  DoseToPointsData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DoseToPointsData& from);
  void MergeFrom(const DoseToPointsData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FileGUID = 1;
  inline bool has_fileguid() const;
  inline void clear_fileguid();
  static const int kFileGUIDFieldNumber = 1;
  inline const ::std::string& fileguid() const;
  inline void set_fileguid(const ::std::string& value);
  inline void set_fileguid(const char* value);
  inline void set_fileguid(const char* value, size_t size);
  inline ::std::string* mutable_fileguid();
  inline ::std::string* release_fileguid();
  inline void set_allocated_fileguid(::std::string* fileguid);

  // repeated .ProtoFileGenerator.Structure Structures = 2;
  inline int structures_size() const;
  inline void clear_structures();
  static const int kStructuresFieldNumber = 2;
  inline const ::ProtoFileGenerator::Structure& structures(int index) const;
  inline ::ProtoFileGenerator::Structure* mutable_structures(int index);
  inline ::ProtoFileGenerator::Structure* add_structures();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Structure >&
      structures() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Structure >*
      mutable_structures();

  // repeated .ProtoFileGenerator.Beam Beams = 3;
  inline int beams_size() const;
  inline void clear_beams();
  static const int kBeamsFieldNumber = 3;
  inline const ::ProtoFileGenerator::Beam& beams(int index) const;
  inline ::ProtoFileGenerator::Beam* mutable_beams(int index);
  inline ::ProtoFileGenerator::Beam* add_beams();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Beam >&
      beams() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Beam >*
      mutable_beams();

  // repeated .ProtoFileGenerator.Point Points = 4;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 4;
  inline const ::ProtoFileGenerator::Point& points(int index) const;
  inline ::ProtoFileGenerator::Point* mutable_points(int index);
  inline ::ProtoFileGenerator::Point* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Point >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Point >*
      mutable_points();

  // repeated .ProtoFileGenerator.Beamlet Beamlets = 5;
  inline int beamlets_size() const;
  inline void clear_beamlets();
  static const int kBeamletsFieldNumber = 5;
  inline const ::ProtoFileGenerator::Beamlet& beamlets(int index) const;
  inline ::ProtoFileGenerator::Beamlet* mutable_beamlets(int index);
  inline ::ProtoFileGenerator::Beamlet* add_beamlets();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Beamlet >&
      beamlets() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Beamlet >*
      mutable_beamlets();

  // repeated .ProtoFileGenerator.PointDose PointDoses = 6;
  inline int pointdoses_size() const;
  inline void clear_pointdoses();
  static const int kPointDosesFieldNumber = 6;
  inline const ::ProtoFileGenerator::PointDose& pointdoses(int index) const;
  inline ::ProtoFileGenerator::PointDose* mutable_pointdoses(int index);
  inline ::ProtoFileGenerator::PointDose* add_pointdoses();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::PointDose >&
      pointdoses() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::PointDose >*
      mutable_pointdoses();

  // @@protoc_insertion_point(class_scope:ProtoFileGenerator.DoseToPointsData)
 private:
  inline void set_has_fileguid();
  inline void clear_has_fileguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* fileguid_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Structure > structures_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Beam > beams_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Point > points_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Beamlet > beamlets_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::PointDose > pointdoses_;
  friend void  protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_AssignDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_ShutdownFile_dose_2dto_2dpoints_2ddata_2eproto();

  void InitAsDefaultInstance();
  static DoseToPointsData* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Index = 1 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional string StructureId = 2;
  inline bool has_structureid() const;
  inline void clear_structureid();
  static const int kStructureIdFieldNumber = 2;
  inline const ::std::string& structureid() const;
  inline void set_structureid(const ::std::string& value);
  inline void set_structureid(const char* value);
  inline void set_structureid(const char* value, size_t size);
  inline ::std::string* mutable_structureid();
  inline ::std::string* release_structureid();
  inline void set_allocated_structureid(::std::string* structureid);

  // optional double X = 3 [default = 0];
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline double x() const;
  inline void set_x(double value);

  // optional double Y = 4 [default = 0];
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline double y() const;
  inline void set_y(double value);

  // optional double Z = 5 [default = 0];
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:ProtoFileGenerator.Point)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_structureid();
  inline void clear_has_structureid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* structureid_;
  double x_;
  double y_;
  double z_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_AssignDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_ShutdownFile_dose_2dto_2dpoints_2ddata_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class PointDose : public ::google::protobuf::Message {
 public:
  PointDose();
  virtual ~PointDose();

  PointDose(const PointDose& from);

  inline PointDose& operator=(const PointDose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointDose& default_instance();

  void Swap(PointDose* other);

  // implements Message ----------------------------------------------

  PointDose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointDose& from);
  void MergeFrom(const PointDose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Index = 1 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated .ProtoFileGenerator.BeamletDose BeamletDoses = 2;
  inline int beamletdoses_size() const;
  inline void clear_beamletdoses();
  static const int kBeamletDosesFieldNumber = 2;
  inline const ::ProtoFileGenerator::BeamletDose& beamletdoses(int index) const;
  inline ::ProtoFileGenerator::BeamletDose* mutable_beamletdoses(int index);
  inline ::ProtoFileGenerator::BeamletDose* add_beamletdoses();
  inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::BeamletDose >&
      beamletdoses() const;
  inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::BeamletDose >*
      mutable_beamletdoses();

  // @@protoc_insertion_point(class_scope:ProtoFileGenerator.PointDose)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::BeamletDose > beamletdoses_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_AssignDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_ShutdownFile_dose_2dto_2dpoints_2ddata_2eproto();

  void InitAsDefaultInstance();
  static PointDose* default_instance_;
};
// -------------------------------------------------------------------

class Structure : public ::google::protobuf::Message {
 public:
  Structure();
  virtual ~Structure();

  Structure(const Structure& from);

  inline Structure& operator=(const Structure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Structure& default_instance();

  void Swap(Structure* other);

  // implements Message ----------------------------------------------

  Structure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Structure& from);
  void MergeFrom(const Structure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // optional double pointsDistanceCM = 2 [default = 0];
  inline bool has_pointsdistancecm() const;
  inline void clear_pointsdistancecm();
  static const int kPointsDistanceCMFieldNumber = 2;
  inline double pointsdistancecm() const;
  inline void set_pointsdistancecm(double value);

  // optional int32 StartPointIndex = 3 [default = 0];
  inline bool has_startpointindex() const;
  inline void clear_startpointindex();
  static const int kStartPointIndexFieldNumber = 3;
  inline ::google::protobuf::int32 startpointindex() const;
  inline void set_startpointindex(::google::protobuf::int32 value);

  // optional int32 EndPointIndex = 4 [default = 0];
  inline bool has_endpointindex() const;
  inline void clear_endpointindex();
  static const int kEndPointIndexFieldNumber = 4;
  inline ::google::protobuf::int32 endpointindex() const;
  inline void set_endpointindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ProtoFileGenerator.Structure)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pointsdistancecm();
  inline void clear_has_pointsdistancecm();
  inline void set_has_startpointindex();
  inline void clear_has_startpointindex();
  inline void set_has_endpointindex();
  inline void clear_has_endpointindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  double pointsdistancecm_;
  ::google::protobuf::int32 startpointindex_;
  ::google::protobuf::int32 endpointindex_;
  friend void  protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_AssignDesc_dose_2dto_2dpoints_2ddata_2eproto();
  friend void protobuf_ShutdownFile_dose_2dto_2dpoints_2ddata_2eproto();

  void InitAsDefaultInstance();
  static Structure* default_instance_;
};
// ===================================================================


// ===================================================================

// Beam

// optional string Id = 1;
inline bool Beam::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Beam::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Beam::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Beam::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Beam::id() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beam.Id)
  return *id_;
}
inline void Beam::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beam.Id)
}
inline void Beam::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoFileGenerator.Beam.Id)
}
inline void Beam::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoFileGenerator.Beam.Id)
}
inline ::std::string* Beam::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoFileGenerator.Beam.Id)
  return id_;
}
inline ::std::string* Beam::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Beam::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFileGenerator.Beam.Id)
}

// optional double JawX1 = 2 [default = 0];
inline bool Beam::has_jawx1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Beam::set_has_jawx1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Beam::clear_has_jawx1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Beam::clear_jawx1() {
  jawx1_ = 0;
  clear_has_jawx1();
}
inline double Beam::jawx1() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beam.JawX1)
  return jawx1_;
}
inline void Beam::set_jawx1(double value) {
  set_has_jawx1();
  jawx1_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beam.JawX1)
}

// optional double JawX2 = 3 [default = 0];
inline bool Beam::has_jawx2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Beam::set_has_jawx2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Beam::clear_has_jawx2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Beam::clear_jawx2() {
  jawx2_ = 0;
  clear_has_jawx2();
}
inline double Beam::jawx2() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beam.JawX2)
  return jawx2_;
}
inline void Beam::set_jawx2(double value) {
  set_has_jawx2();
  jawx2_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beam.JawX2)
}

// optional double JawY1 = 4 [default = 0];
inline bool Beam::has_jawy1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Beam::set_has_jawy1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Beam::clear_has_jawy1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Beam::clear_jawy1() {
  jawy1_ = 0;
  clear_has_jawy1();
}
inline double Beam::jawy1() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beam.JawY1)
  return jawy1_;
}
inline void Beam::set_jawy1(double value) {
  set_has_jawy1();
  jawy1_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beam.JawY1)
}

// optional double JawY2 = 5 [default = 0];
inline bool Beam::has_jawy2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Beam::set_has_jawy2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Beam::clear_has_jawy2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Beam::clear_jawy2() {
  jawy2_ = 0;
  clear_has_jawy2();
}
inline double Beam::jawy2() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beam.JawY2)
  return jawy2_;
}
inline void Beam::set_jawy2(double value) {
  set_has_jawy2();
  jawy2_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beam.JawY2)
}

// optional int32 StartBeamletIndex = 6 [default = 0];
inline bool Beam::has_startbeamletindex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Beam::set_has_startbeamletindex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Beam::clear_has_startbeamletindex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Beam::clear_startbeamletindex() {
  startbeamletindex_ = 0;
  clear_has_startbeamletindex();
}
inline ::google::protobuf::int32 Beam::startbeamletindex() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beam.StartBeamletIndex)
  return startbeamletindex_;
}
inline void Beam::set_startbeamletindex(::google::protobuf::int32 value) {
  set_has_startbeamletindex();
  startbeamletindex_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beam.StartBeamletIndex)
}

// optional int32 EndBeamletIndex = 7 [default = 0];
inline bool Beam::has_endbeamletindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Beam::set_has_endbeamletindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Beam::clear_has_endbeamletindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Beam::clear_endbeamletindex() {
  endbeamletindex_ = 0;
  clear_has_endbeamletindex();
}
inline ::google::protobuf::int32 Beam::endbeamletindex() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beam.EndBeamletIndex)
  return endbeamletindex_;
}
inline void Beam::set_endbeamletindex(::google::protobuf::int32 value) {
  set_has_endbeamletindex();
  endbeamletindex_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beam.EndBeamletIndex)
}

// -------------------------------------------------------------------

// Beamlet

// optional int32 Index = 1 [default = 0];
inline bool Beamlet::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Beamlet::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Beamlet::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Beamlet::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Beamlet::index() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beamlet.Index)
  return index_;
}
inline void Beamlet::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beamlet.Index)
}

// optional string BeamId = 2;
inline bool Beamlet::has_beamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Beamlet::set_has_beamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Beamlet::clear_has_beamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Beamlet::clear_beamid() {
  if (beamid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    beamid_->clear();
  }
  clear_has_beamid();
}
inline const ::std::string& Beamlet::beamid() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beamlet.BeamId)
  return *beamid_;
}
inline void Beamlet::set_beamid(const ::std::string& value) {
  set_has_beamid();
  if (beamid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    beamid_ = new ::std::string;
  }
  beamid_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beamlet.BeamId)
}
inline void Beamlet::set_beamid(const char* value) {
  set_has_beamid();
  if (beamid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    beamid_ = new ::std::string;
  }
  beamid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoFileGenerator.Beamlet.BeamId)
}
inline void Beamlet::set_beamid(const char* value, size_t size) {
  set_has_beamid();
  if (beamid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    beamid_ = new ::std::string;
  }
  beamid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoFileGenerator.Beamlet.BeamId)
}
inline ::std::string* Beamlet::mutable_beamid() {
  set_has_beamid();
  if (beamid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    beamid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoFileGenerator.Beamlet.BeamId)
  return beamid_;
}
inline ::std::string* Beamlet::release_beamid() {
  clear_has_beamid();
  if (beamid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = beamid_;
    beamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Beamlet::set_allocated_beamid(::std::string* beamid) {
  if (beamid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete beamid_;
  }
  if (beamid) {
    set_has_beamid();
    beamid_ = beamid;
  } else {
    clear_has_beamid();
    beamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFileGenerator.Beamlet.BeamId)
}

// optional double XSize = 3 [default = 0];
inline bool Beamlet::has_xsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Beamlet::set_has_xsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Beamlet::clear_has_xsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Beamlet::clear_xsize() {
  xsize_ = 0;
  clear_has_xsize();
}
inline double Beamlet::xsize() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beamlet.XSize)
  return xsize_;
}
inline void Beamlet::set_xsize(double value) {
  set_has_xsize();
  xsize_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beamlet.XSize)
}

// optional double YSize = 4 [default = 0];
inline bool Beamlet::has_ysize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Beamlet::set_has_ysize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Beamlet::clear_has_ysize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Beamlet::clear_ysize() {
  ysize_ = 0;
  clear_has_ysize();
}
inline double Beamlet::ysize() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beamlet.YSize)
  return ysize_;
}
inline void Beamlet::set_ysize(double value) {
  set_has_ysize();
  ysize_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beamlet.YSize)
}

// optional double XStart = 5 [default = 0];
inline bool Beamlet::has_xstart() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Beamlet::set_has_xstart() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Beamlet::clear_has_xstart() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Beamlet::clear_xstart() {
  xstart_ = 0;
  clear_has_xstart();
}
inline double Beamlet::xstart() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beamlet.XStart)
  return xstart_;
}
inline void Beamlet::set_xstart(double value) {
  set_has_xstart();
  xstart_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beamlet.XStart)
}

// optional double YStart = 6 [default = 0];
inline bool Beamlet::has_ystart() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Beamlet::set_has_ystart() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Beamlet::clear_has_ystart() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Beamlet::clear_ystart() {
  ystart_ = 0;
  clear_has_ystart();
}
inline double Beamlet::ystart() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Beamlet.YStart)
  return ystart_;
}
inline void Beamlet::set_ystart(double value) {
  set_has_ystart();
  ystart_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Beamlet.YStart)
}

// -------------------------------------------------------------------

// BeamletDose

// optional int32 Index = 1 [default = 0];
inline bool BeamletDose::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeamletDose::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeamletDose::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeamletDose::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 BeamletDose::index() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.BeamletDose.Index)
  return index_;
}
inline void BeamletDose::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.BeamletDose.Index)
}

// optional double Dose = 2 [default = 0];
inline bool BeamletDose::has_dose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeamletDose::set_has_dose() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeamletDose::clear_has_dose() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeamletDose::clear_dose() {
  dose_ = 0;
  clear_has_dose();
}
inline double BeamletDose::dose() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.BeamletDose.Dose)
  return dose_;
}
inline void BeamletDose::set_dose(double value) {
  set_has_dose();
  dose_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.BeamletDose.Dose)
}

// -------------------------------------------------------------------

// DoseToPointsData

// optional string FileGUID = 1;
inline bool DoseToPointsData::has_fileguid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DoseToPointsData::set_has_fileguid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DoseToPointsData::clear_has_fileguid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DoseToPointsData::clear_fileguid() {
  if (fileguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileguid_->clear();
  }
  clear_has_fileguid();
}
inline const ::std::string& DoseToPointsData::fileguid() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.DoseToPointsData.FileGUID)
  return *fileguid_;
}
inline void DoseToPointsData::set_fileguid(const ::std::string& value) {
  set_has_fileguid();
  if (fileguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileguid_ = new ::std::string;
  }
  fileguid_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.DoseToPointsData.FileGUID)
}
inline void DoseToPointsData::set_fileguid(const char* value) {
  set_has_fileguid();
  if (fileguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileguid_ = new ::std::string;
  }
  fileguid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoFileGenerator.DoseToPointsData.FileGUID)
}
inline void DoseToPointsData::set_fileguid(const char* value, size_t size) {
  set_has_fileguid();
  if (fileguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileguid_ = new ::std::string;
  }
  fileguid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoFileGenerator.DoseToPointsData.FileGUID)
}
inline ::std::string* DoseToPointsData::mutable_fileguid() {
  set_has_fileguid();
  if (fileguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    fileguid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoFileGenerator.DoseToPointsData.FileGUID)
  return fileguid_;
}
inline ::std::string* DoseToPointsData::release_fileguid() {
  clear_has_fileguid();
  if (fileguid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = fileguid_;
    fileguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DoseToPointsData::set_allocated_fileguid(::std::string* fileguid) {
  if (fileguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fileguid_;
  }
  if (fileguid) {
    set_has_fileguid();
    fileguid_ = fileguid;
  } else {
    clear_has_fileguid();
    fileguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFileGenerator.DoseToPointsData.FileGUID)
}

// repeated .ProtoFileGenerator.Structure Structures = 2;
inline int DoseToPointsData::structures_size() const {
  return structures_.size();
}
inline void DoseToPointsData::clear_structures() {
  structures_.Clear();
}
inline const ::ProtoFileGenerator::Structure& DoseToPointsData::structures(int index) const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.DoseToPointsData.Structures)
  return structures_.Get(index);
}
inline ::ProtoFileGenerator::Structure* DoseToPointsData::mutable_structures(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoFileGenerator.DoseToPointsData.Structures)
  return structures_.Mutable(index);
}
inline ::ProtoFileGenerator::Structure* DoseToPointsData::add_structures() {
  // @@protoc_insertion_point(field_add:ProtoFileGenerator.DoseToPointsData.Structures)
  return structures_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Structure >&
DoseToPointsData::structures() const {
  // @@protoc_insertion_point(field_list:ProtoFileGenerator.DoseToPointsData.Structures)
  return structures_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Structure >*
DoseToPointsData::mutable_structures() {
  // @@protoc_insertion_point(field_mutable_list:ProtoFileGenerator.DoseToPointsData.Structures)
  return &structures_;
}

// repeated .ProtoFileGenerator.Beam Beams = 3;
inline int DoseToPointsData::beams_size() const {
  return beams_.size();
}
inline void DoseToPointsData::clear_beams() {
  beams_.Clear();
}
inline const ::ProtoFileGenerator::Beam& DoseToPointsData::beams(int index) const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.DoseToPointsData.Beams)
  return beams_.Get(index);
}
inline ::ProtoFileGenerator::Beam* DoseToPointsData::mutable_beams(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoFileGenerator.DoseToPointsData.Beams)
  return beams_.Mutable(index);
}
inline ::ProtoFileGenerator::Beam* DoseToPointsData::add_beams() {
  // @@protoc_insertion_point(field_add:ProtoFileGenerator.DoseToPointsData.Beams)
  return beams_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Beam >&
DoseToPointsData::beams() const {
  // @@protoc_insertion_point(field_list:ProtoFileGenerator.DoseToPointsData.Beams)
  return beams_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Beam >*
DoseToPointsData::mutable_beams() {
  // @@protoc_insertion_point(field_mutable_list:ProtoFileGenerator.DoseToPointsData.Beams)
  return &beams_;
}

// repeated .ProtoFileGenerator.Point Points = 4;
inline int DoseToPointsData::points_size() const {
  return points_.size();
}
inline void DoseToPointsData::clear_points() {
  points_.Clear();
}
inline const ::ProtoFileGenerator::Point& DoseToPointsData::points(int index) const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.DoseToPointsData.Points)
  return points_.Get(index);
}
inline ::ProtoFileGenerator::Point* DoseToPointsData::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoFileGenerator.DoseToPointsData.Points)
  return points_.Mutable(index);
}
inline ::ProtoFileGenerator::Point* DoseToPointsData::add_points() {
  // @@protoc_insertion_point(field_add:ProtoFileGenerator.DoseToPointsData.Points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Point >&
DoseToPointsData::points() const {
  // @@protoc_insertion_point(field_list:ProtoFileGenerator.DoseToPointsData.Points)
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Point >*
DoseToPointsData::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:ProtoFileGenerator.DoseToPointsData.Points)
  return &points_;
}

// repeated .ProtoFileGenerator.Beamlet Beamlets = 5;
inline int DoseToPointsData::beamlets_size() const {
  return beamlets_.size();
}
inline void DoseToPointsData::clear_beamlets() {
  beamlets_.Clear();
}
inline const ::ProtoFileGenerator::Beamlet& DoseToPointsData::beamlets(int index) const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.DoseToPointsData.Beamlets)
  return beamlets_.Get(index);
}
inline ::ProtoFileGenerator::Beamlet* DoseToPointsData::mutable_beamlets(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoFileGenerator.DoseToPointsData.Beamlets)
  return beamlets_.Mutable(index);
}
inline ::ProtoFileGenerator::Beamlet* DoseToPointsData::add_beamlets() {
  // @@protoc_insertion_point(field_add:ProtoFileGenerator.DoseToPointsData.Beamlets)
  return beamlets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Beamlet >&
DoseToPointsData::beamlets() const {
  // @@protoc_insertion_point(field_list:ProtoFileGenerator.DoseToPointsData.Beamlets)
  return beamlets_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::Beamlet >*
DoseToPointsData::mutable_beamlets() {
  // @@protoc_insertion_point(field_mutable_list:ProtoFileGenerator.DoseToPointsData.Beamlets)
  return &beamlets_;
}

// repeated .ProtoFileGenerator.PointDose PointDoses = 6;
inline int DoseToPointsData::pointdoses_size() const {
  return pointdoses_.size();
}
inline void DoseToPointsData::clear_pointdoses() {
  pointdoses_.Clear();
}
inline const ::ProtoFileGenerator::PointDose& DoseToPointsData::pointdoses(int index) const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.DoseToPointsData.PointDoses)
  return pointdoses_.Get(index);
}
inline ::ProtoFileGenerator::PointDose* DoseToPointsData::mutable_pointdoses(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoFileGenerator.DoseToPointsData.PointDoses)
  return pointdoses_.Mutable(index);
}
inline ::ProtoFileGenerator::PointDose* DoseToPointsData::add_pointdoses() {
  // @@protoc_insertion_point(field_add:ProtoFileGenerator.DoseToPointsData.PointDoses)
  return pointdoses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::PointDose >&
DoseToPointsData::pointdoses() const {
  // @@protoc_insertion_point(field_list:ProtoFileGenerator.DoseToPointsData.PointDoses)
  return pointdoses_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::PointDose >*
DoseToPointsData::mutable_pointdoses() {
  // @@protoc_insertion_point(field_mutable_list:ProtoFileGenerator.DoseToPointsData.PointDoses)
  return &pointdoses_;
}

// -------------------------------------------------------------------

// Point

// optional int32 Index = 1 [default = 0];
inline bool Point::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Point::index() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Point.Index)
  return index_;
}
inline void Point::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Point.Index)
}

// optional string StructureId = 2;
inline bool Point::has_structureid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_structureid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_structureid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_structureid() {
  if (structureid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    structureid_->clear();
  }
  clear_has_structureid();
}
inline const ::std::string& Point::structureid() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Point.StructureId)
  return *structureid_;
}
inline void Point::set_structureid(const ::std::string& value) {
  set_has_structureid();
  if (structureid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    structureid_ = new ::std::string;
  }
  structureid_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Point.StructureId)
}
inline void Point::set_structureid(const char* value) {
  set_has_structureid();
  if (structureid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    structureid_ = new ::std::string;
  }
  structureid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoFileGenerator.Point.StructureId)
}
inline void Point::set_structureid(const char* value, size_t size) {
  set_has_structureid();
  if (structureid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    structureid_ = new ::std::string;
  }
  structureid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoFileGenerator.Point.StructureId)
}
inline ::std::string* Point::mutable_structureid() {
  set_has_structureid();
  if (structureid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    structureid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoFileGenerator.Point.StructureId)
  return structureid_;
}
inline ::std::string* Point::release_structureid() {
  clear_has_structureid();
  if (structureid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = structureid_;
    structureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Point::set_allocated_structureid(::std::string* structureid) {
  if (structureid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete structureid_;
  }
  if (structureid) {
    set_has_structureid();
    structureid_ = structureid;
  } else {
    clear_has_structureid();
    structureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFileGenerator.Point.StructureId)
}

// optional double X = 3 [default = 0];
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Point.X)
  return x_;
}
inline void Point::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Point.X)
}

// optional double Y = 4 [default = 0];
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Point.Y)
  return y_;
}
inline void Point::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Point.Y)
}

// optional double Z = 5 [default = 0];
inline bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Point::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Point::z() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Point.Z)
  return z_;
}
inline void Point::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Point.Z)
}

// -------------------------------------------------------------------

// PointDose

// optional int32 Index = 1 [default = 0];
inline bool PointDose::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointDose::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointDose::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointDose::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 PointDose::index() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.PointDose.Index)
  return index_;
}
inline void PointDose::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.PointDose.Index)
}

// repeated .ProtoFileGenerator.BeamletDose BeamletDoses = 2;
inline int PointDose::beamletdoses_size() const {
  return beamletdoses_.size();
}
inline void PointDose::clear_beamletdoses() {
  beamletdoses_.Clear();
}
inline const ::ProtoFileGenerator::BeamletDose& PointDose::beamletdoses(int index) const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.PointDose.BeamletDoses)
  return beamletdoses_.Get(index);
}
inline ::ProtoFileGenerator::BeamletDose* PointDose::mutable_beamletdoses(int index) {
  // @@protoc_insertion_point(field_mutable:ProtoFileGenerator.PointDose.BeamletDoses)
  return beamletdoses_.Mutable(index);
}
inline ::ProtoFileGenerator::BeamletDose* PointDose::add_beamletdoses() {
  // @@protoc_insertion_point(field_add:ProtoFileGenerator.PointDose.BeamletDoses)
  return beamletdoses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::BeamletDose >&
PointDose::beamletdoses() const {
  // @@protoc_insertion_point(field_list:ProtoFileGenerator.PointDose.BeamletDoses)
  return beamletdoses_;
}
inline ::google::protobuf::RepeatedPtrField< ::ProtoFileGenerator::BeamletDose >*
PointDose::mutable_beamletdoses() {
  // @@protoc_insertion_point(field_mutable_list:ProtoFileGenerator.PointDose.BeamletDoses)
  return &beamletdoses_;
}

// -------------------------------------------------------------------

// Structure

// optional string Id = 1;
inline bool Structure::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Structure::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Structure::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Structure::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Structure::id() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Structure.Id)
  return *id_;
}
inline void Structure::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Structure.Id)
}
inline void Structure::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:ProtoFileGenerator.Structure.Id)
}
inline void Structure::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ProtoFileGenerator.Structure.Id)
}
inline ::std::string* Structure::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ProtoFileGenerator.Structure.Id)
  return id_;
}
inline ::std::string* Structure::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Structure::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoFileGenerator.Structure.Id)
}

// optional double pointsDistanceCM = 2 [default = 0];
inline bool Structure::has_pointsdistancecm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Structure::set_has_pointsdistancecm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Structure::clear_has_pointsdistancecm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Structure::clear_pointsdistancecm() {
  pointsdistancecm_ = 0;
  clear_has_pointsdistancecm();
}
inline double Structure::pointsdistancecm() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Structure.pointsDistanceCM)
  return pointsdistancecm_;
}
inline void Structure::set_pointsdistancecm(double value) {
  set_has_pointsdistancecm();
  pointsdistancecm_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Structure.pointsDistanceCM)
}

// optional int32 StartPointIndex = 3 [default = 0];
inline bool Structure::has_startpointindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Structure::set_has_startpointindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Structure::clear_has_startpointindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Structure::clear_startpointindex() {
  startpointindex_ = 0;
  clear_has_startpointindex();
}
inline ::google::protobuf::int32 Structure::startpointindex() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Structure.StartPointIndex)
  return startpointindex_;
}
inline void Structure::set_startpointindex(::google::protobuf::int32 value) {
  set_has_startpointindex();
  startpointindex_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Structure.StartPointIndex)
}

// optional int32 EndPointIndex = 4 [default = 0];
inline bool Structure::has_endpointindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Structure::set_has_endpointindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Structure::clear_has_endpointindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Structure::clear_endpointindex() {
  endpointindex_ = 0;
  clear_has_endpointindex();
}
inline ::google::protobuf::int32 Structure::endpointindex() const {
  // @@protoc_insertion_point(field_get:ProtoFileGenerator.Structure.EndPointIndex)
  return endpointindex_;
}
inline void Structure::set_endpointindex(::google::protobuf::int32 value) {
  set_has_endpointindex();
  endpointindex_ = value;
  // @@protoc_insertion_point(field_set:ProtoFileGenerator.Structure.EndPointIndex)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoFileGenerator

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dose_2dto_2dpoints_2ddata_2eproto__INCLUDED
