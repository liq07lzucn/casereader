// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dose-to-points-data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dose-to-points-data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoFileGenerator {

namespace {

const ::google::protobuf::Descriptor* Beam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Beam_reflection_ = NULL;
const ::google::protobuf::Descriptor* Beamlet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Beamlet_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeamletDose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeamletDose_reflection_ = NULL;
const ::google::protobuf::Descriptor* DoseToPointsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DoseToPointsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointDose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointDose_reflection_ = NULL;
const ::google::protobuf::Descriptor* Structure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Structure_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dose_2dto_2dpoints_2ddata_2eproto() {
  protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dose-to-points-data.proto");
  GOOGLE_CHECK(file != NULL);
  Beam_descriptor_ = file->message_type(0);
  static const int Beam_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beam, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beam, jawx1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beam, jawx2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beam, jawy1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beam, jawy2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beam, startbeamletindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beam, endbeamletindex_),
  };
  Beam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Beam_descriptor_,
      Beam::default_instance_,
      Beam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Beam));
  Beamlet_descriptor_ = file->message_type(1);
  static const int Beamlet_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beamlet, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beamlet, beamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beamlet, xsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beamlet, ysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beamlet, xstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beamlet, ystart_),
  };
  Beamlet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Beamlet_descriptor_,
      Beamlet::default_instance_,
      Beamlet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beamlet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Beamlet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Beamlet));
  BeamletDose_descriptor_ = file->message_type(2);
  static const int BeamletDose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamletDose, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamletDose, dose_),
  };
  BeamletDose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeamletDose_descriptor_,
      BeamletDose::default_instance_,
      BeamletDose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamletDose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamletDose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeamletDose));
  DoseToPointsData_descriptor_ = file->message_type(3);
  static const int DoseToPointsData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoseToPointsData, fileguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoseToPointsData, structures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoseToPointsData, beams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoseToPointsData, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoseToPointsData, beamlets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoseToPointsData, pointdoses_),
  };
  DoseToPointsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DoseToPointsData_descriptor_,
      DoseToPointsData::default_instance_,
      DoseToPointsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoseToPointsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DoseToPointsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DoseToPointsData));
  Point_descriptor_ = file->message_type(4);
  static const int Point_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, structureid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  PointDose_descriptor_ = file->message_type(5);
  static const int PointDose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDose, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDose, beamletdoses_),
  };
  PointDose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointDose_descriptor_,
      PointDose::default_instance_,
      PointDose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointDose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointDose));
  Structure_descriptor_ = file->message_type(6);
  static const int Structure_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Structure, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Structure, pointsdistancecm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Structure, startpointindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Structure, endpointindex_),
  };
  Structure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Structure_descriptor_,
      Structure::default_instance_,
      Structure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Structure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Structure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Structure));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dose_2dto_2dpoints_2ddata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Beam_descriptor_, &Beam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Beamlet_descriptor_, &Beamlet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeamletDose_descriptor_, &BeamletDose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DoseToPointsData_descriptor_, &DoseToPointsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointDose_descriptor_, &PointDose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Structure_descriptor_, &Structure::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dose_2dto_2dpoints_2ddata_2eproto() {
  delete Beam::default_instance_;
  delete Beam_reflection_;
  delete Beamlet::default_instance_;
  delete Beamlet_reflection_;
  delete BeamletDose::default_instance_;
  delete BeamletDose_reflection_;
  delete DoseToPointsData::default_instance_;
  delete DoseToPointsData_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
  delete PointDose::default_instance_;
  delete PointDose_reflection_;
  delete Structure::default_instance_;
  delete Structure_reflection_;
}

void protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031dose-to-points-data.proto\022\022ProtoFileGe"
    "nerator\"\224\001\n\004Beam\022\n\n\002Id\030\001 \001(\t\022\020\n\005JawX1\030\002 "
    "\001(\001:\0010\022\020\n\005JawX2\030\003 \001(\001:\0010\022\020\n\005JawY1\030\004 \001(\001:"
    "\0010\022\020\n\005JawY2\030\005 \001(\001:\0010\022\034\n\021StartBeamletInde"
    "x\030\006 \001(\005:\0010\022\032\n\017EndBeamletIndex\030\007 \001(\005:\0010\"u"
    "\n\007Beamlet\022\020\n\005Index\030\001 \001(\005:\0010\022\016\n\006BeamId\030\002 "
    "\001(\t\022\020\n\005XSize\030\003 \001(\001:\0010\022\020\n\005YSize\030\004 \001(\001:\0010\022"
    "\021\n\006XStart\030\005 \001(\001:\0010\022\021\n\006YStart\030\006 \001(\001:\0010\"0\n"
    "\013BeamletDose\022\020\n\005Index\030\001 \001(\005:\0010\022\017\n\004Dose\030\002"
    " \001(\001:\0010\"\215\002\n\020DoseToPointsData\022\020\n\010FileGUID"
    "\030\001 \001(\t\0221\n\nStructures\030\002 \003(\0132\035.ProtoFileGe"
    "nerator.Structure\022\'\n\005Beams\030\003 \003(\0132\030.Proto"
    "FileGenerator.Beam\022)\n\006Points\030\004 \003(\0132\031.Pro"
    "toFileGenerator.Point\022-\n\010Beamlets\030\005 \003(\0132"
    "\033.ProtoFileGenerator.Beamlet\0221\n\nPointDos"
    "es\030\006 \003(\0132\035.ProtoFileGenerator.PointDose\""
    "X\n\005Point\022\020\n\005Index\030\001 \001(\005:\0010\022\023\n\013StructureI"
    "d\030\002 \001(\t\022\014\n\001X\030\003 \001(\001:\0010\022\014\n\001Y\030\004 \001(\001:\0010\022\014\n\001Z"
    "\030\005 \001(\001:\0010\"T\n\tPointDose\022\020\n\005Index\030\001 \001(\005:\0010"
    "\0225\n\014BeamletDoses\030\002 \003(\0132\037.ProtoFileGenera"
    "tor.BeamletDose\"j\n\tStructure\022\n\n\002Id\030\001 \001(\t"
    "\022\033\n\020pointsDistanceCM\030\002 \001(\001:\0010\022\032\n\017StartPo"
    "intIndex\030\003 \001(\005:\0010\022\030\n\rEndPointIndex\030\004 \001(\005"
    ":\0010", 923);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dose-to-points-data.proto", &protobuf_RegisterTypes);
  Beam::default_instance_ = new Beam();
  Beamlet::default_instance_ = new Beamlet();
  BeamletDose::default_instance_ = new BeamletDose();
  DoseToPointsData::default_instance_ = new DoseToPointsData();
  Point::default_instance_ = new Point();
  PointDose::default_instance_ = new PointDose();
  Structure::default_instance_ = new Structure();
  Beam::default_instance_->InitAsDefaultInstance();
  Beamlet::default_instance_->InitAsDefaultInstance();
  BeamletDose::default_instance_->InitAsDefaultInstance();
  DoseToPointsData::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  PointDose::default_instance_->InitAsDefaultInstance();
  Structure::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dose_2dto_2dpoints_2ddata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dose_2dto_2dpoints_2ddata_2eproto {
  StaticDescriptorInitializer_dose_2dto_2dpoints_2ddata_2eproto() {
    protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  }
} static_descriptor_initializer_dose_2dto_2dpoints_2ddata_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Beam::kIdFieldNumber;
const int Beam::kJawX1FieldNumber;
const int Beam::kJawX2FieldNumber;
const int Beam::kJawY1FieldNumber;
const int Beam::kJawY2FieldNumber;
const int Beam::kStartBeamletIndexFieldNumber;
const int Beam::kEndBeamletIndexFieldNumber;
#endif  // !_MSC_VER

Beam::Beam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFileGenerator.Beam)
}

void Beam::InitAsDefaultInstance() {
}

Beam::Beam(const Beam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFileGenerator.Beam)
}

void Beam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jawx1_ = 0;
  jawx2_ = 0;
  jawy1_ = 0;
  jawy2_ = 0;
  startbeamletindex_ = 0;
  endbeamletindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Beam::~Beam() {
  // @@protoc_insertion_point(destructor:ProtoFileGenerator.Beam)
  SharedDtor();
}

void Beam::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Beam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Beam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Beam_descriptor_;
}

const Beam& Beam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  return *default_instance_;
}

Beam* Beam::default_instance_ = NULL;

Beam* Beam::New() const {
  return new Beam;
}

void Beam::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Beam*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(jawx1_, endbeamletindex_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Beam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFileGenerator.Beam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_JawX1;
        break;
      }

      // optional double JawX1 = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_JawX1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jawx1_)));
          set_has_jawx1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_JawX2;
        break;
      }

      // optional double JawX2 = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_JawX2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jawx2_)));
          set_has_jawx2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_JawY1;
        break;
      }

      // optional double JawY1 = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_JawY1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jawy1_)));
          set_has_jawy1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_JawY2;
        break;
      }

      // optional double JawY2 = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_JawY2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jawy2_)));
          set_has_jawy2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_StartBeamletIndex;
        break;
      }

      // optional int32 StartBeamletIndex = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_StartBeamletIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startbeamletindex_)));
          set_has_startbeamletindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_EndBeamletIndex;
        break;
      }

      // optional int32 EndBeamletIndex = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_EndBeamletIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endbeamletindex_)));
          set_has_endbeamletindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFileGenerator.Beam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFileGenerator.Beam)
  return false;
#undef DO_
}

void Beam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFileGenerator.Beam)
  // optional string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double JawX1 = 2 [default = 0];
  if (has_jawx1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->jawx1(), output);
  }

  // optional double JawX2 = 3 [default = 0];
  if (has_jawx2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->jawx2(), output);
  }

  // optional double JawY1 = 4 [default = 0];
  if (has_jawy1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->jawy1(), output);
  }

  // optional double JawY2 = 5 [default = 0];
  if (has_jawy2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->jawy2(), output);
  }

  // optional int32 StartBeamletIndex = 6 [default = 0];
  if (has_startbeamletindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->startbeamletindex(), output);
  }

  // optional int32 EndBeamletIndex = 7 [default = 0];
  if (has_endbeamletindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->endbeamletindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFileGenerator.Beam)
}

::google::protobuf::uint8* Beam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFileGenerator.Beam)
  // optional string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double JawX1 = 2 [default = 0];
  if (has_jawx1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->jawx1(), target);
  }

  // optional double JawX2 = 3 [default = 0];
  if (has_jawx2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->jawx2(), target);
  }

  // optional double JawY1 = 4 [default = 0];
  if (has_jawy1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->jawy1(), target);
  }

  // optional double JawY2 = 5 [default = 0];
  if (has_jawy2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->jawy2(), target);
  }

  // optional int32 StartBeamletIndex = 6 [default = 0];
  if (has_startbeamletindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->startbeamletindex(), target);
  }

  // optional int32 EndBeamletIndex = 7 [default = 0];
  if (has_endbeamletindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->endbeamletindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFileGenerator.Beam)
  return target;
}

int Beam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double JawX1 = 2 [default = 0];
    if (has_jawx1()) {
      total_size += 1 + 8;
    }

    // optional double JawX2 = 3 [default = 0];
    if (has_jawx2()) {
      total_size += 1 + 8;
    }

    // optional double JawY1 = 4 [default = 0];
    if (has_jawy1()) {
      total_size += 1 + 8;
    }

    // optional double JawY2 = 5 [default = 0];
    if (has_jawy2()) {
      total_size += 1 + 8;
    }

    // optional int32 StartBeamletIndex = 6 [default = 0];
    if (has_startbeamletindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startbeamletindex());
    }

    // optional int32 EndBeamletIndex = 7 [default = 0];
    if (has_endbeamletindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endbeamletindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Beam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Beam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Beam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Beam::MergeFrom(const Beam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_jawx1()) {
      set_jawx1(from.jawx1());
    }
    if (from.has_jawx2()) {
      set_jawx2(from.jawx2());
    }
    if (from.has_jawy1()) {
      set_jawy1(from.jawy1());
    }
    if (from.has_jawy2()) {
      set_jawy2(from.jawy2());
    }
    if (from.has_startbeamletindex()) {
      set_startbeamletindex(from.startbeamletindex());
    }
    if (from.has_endbeamletindex()) {
      set_endbeamletindex(from.endbeamletindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Beam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Beam::CopyFrom(const Beam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Beam::IsInitialized() const {

  return true;
}

void Beam::Swap(Beam* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(jawx1_, other->jawx1_);
    std::swap(jawx2_, other->jawx2_);
    std::swap(jawy1_, other->jawy1_);
    std::swap(jawy2_, other->jawy2_);
    std::swap(startbeamletindex_, other->startbeamletindex_);
    std::swap(endbeamletindex_, other->endbeamletindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Beam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Beam_descriptor_;
  metadata.reflection = Beam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Beamlet::kIndexFieldNumber;
const int Beamlet::kBeamIdFieldNumber;
const int Beamlet::kXSizeFieldNumber;
const int Beamlet::kYSizeFieldNumber;
const int Beamlet::kXStartFieldNumber;
const int Beamlet::kYStartFieldNumber;
#endif  // !_MSC_VER

Beamlet::Beamlet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFileGenerator.Beamlet)
}

void Beamlet::InitAsDefaultInstance() {
}

Beamlet::Beamlet(const Beamlet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFileGenerator.Beamlet)
}

void Beamlet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  beamid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  xsize_ = 0;
  ysize_ = 0;
  xstart_ = 0;
  ystart_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Beamlet::~Beamlet() {
  // @@protoc_insertion_point(destructor:ProtoFileGenerator.Beamlet)
  SharedDtor();
}

void Beamlet::SharedDtor() {
  if (beamid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete beamid_;
  }
  if (this != default_instance_) {
  }
}

void Beamlet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Beamlet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Beamlet_descriptor_;
}

const Beamlet& Beamlet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  return *default_instance_;
}

Beamlet* Beamlet::default_instance_ = NULL;

Beamlet* Beamlet::New() const {
  return new Beamlet;
}

void Beamlet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Beamlet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(xsize_, index_);
    if (has_beamid()) {
      if (beamid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        beamid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Beamlet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFileGenerator.Beamlet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BeamId;
        break;
      }

      // optional string BeamId = 2;
      case 2: {
        if (tag == 18) {
         parse_BeamId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beamid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->beamid().data(), this->beamid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "beamid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_XSize;
        break;
      }

      // optional double XSize = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_XSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xsize_)));
          set_has_xsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_YSize;
        break;
      }

      // optional double YSize = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_YSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ysize_)));
          set_has_ysize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_XStart;
        break;
      }

      // optional double XStart = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_XStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xstart_)));
          set_has_xstart();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_YStart;
        break;
      }

      // optional double YStart = 6 [default = 0];
      case 6: {
        if (tag == 49) {
         parse_YStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ystart_)));
          set_has_ystart();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFileGenerator.Beamlet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFileGenerator.Beamlet)
  return false;
#undef DO_
}

void Beamlet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFileGenerator.Beamlet)
  // optional int32 Index = 1 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional string BeamId = 2;
  if (has_beamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->beamid().data(), this->beamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "beamid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->beamid(), output);
  }

  // optional double XSize = 3 [default = 0];
  if (has_xsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->xsize(), output);
  }

  // optional double YSize = 4 [default = 0];
  if (has_ysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ysize(), output);
  }

  // optional double XStart = 5 [default = 0];
  if (has_xstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->xstart(), output);
  }

  // optional double YStart = 6 [default = 0];
  if (has_ystart()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ystart(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFileGenerator.Beamlet)
}

::google::protobuf::uint8* Beamlet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFileGenerator.Beamlet)
  // optional int32 Index = 1 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional string BeamId = 2;
  if (has_beamid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->beamid().data(), this->beamid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "beamid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->beamid(), target);
  }

  // optional double XSize = 3 [default = 0];
  if (has_xsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->xsize(), target);
  }

  // optional double YSize = 4 [default = 0];
  if (has_ysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ysize(), target);
  }

  // optional double XStart = 5 [default = 0];
  if (has_xstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->xstart(), target);
  }

  // optional double YStart = 6 [default = 0];
  if (has_ystart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ystart(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFileGenerator.Beamlet)
  return target;
}

int Beamlet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional string BeamId = 2;
    if (has_beamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beamid());
    }

    // optional double XSize = 3 [default = 0];
    if (has_xsize()) {
      total_size += 1 + 8;
    }

    // optional double YSize = 4 [default = 0];
    if (has_ysize()) {
      total_size += 1 + 8;
    }

    // optional double XStart = 5 [default = 0];
    if (has_xstart()) {
      total_size += 1 + 8;
    }

    // optional double YStart = 6 [default = 0];
    if (has_ystart()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Beamlet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Beamlet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Beamlet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Beamlet::MergeFrom(const Beamlet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_beamid()) {
      set_beamid(from.beamid());
    }
    if (from.has_xsize()) {
      set_xsize(from.xsize());
    }
    if (from.has_ysize()) {
      set_ysize(from.ysize());
    }
    if (from.has_xstart()) {
      set_xstart(from.xstart());
    }
    if (from.has_ystart()) {
      set_ystart(from.ystart());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Beamlet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Beamlet::CopyFrom(const Beamlet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Beamlet::IsInitialized() const {

  return true;
}

void Beamlet::Swap(Beamlet* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(beamid_, other->beamid_);
    std::swap(xsize_, other->xsize_);
    std::swap(ysize_, other->ysize_);
    std::swap(xstart_, other->xstart_);
    std::swap(ystart_, other->ystart_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Beamlet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Beamlet_descriptor_;
  metadata.reflection = Beamlet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeamletDose::kIndexFieldNumber;
const int BeamletDose::kDoseFieldNumber;
#endif  // !_MSC_VER

BeamletDose::BeamletDose()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFileGenerator.BeamletDose)
}

void BeamletDose::InitAsDefaultInstance() {
}

BeamletDose::BeamletDose(const BeamletDose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFileGenerator.BeamletDose)
}

void BeamletDose::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  dose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeamletDose::~BeamletDose() {
  // @@protoc_insertion_point(destructor:ProtoFileGenerator.BeamletDose)
  SharedDtor();
}

void BeamletDose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeamletDose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeamletDose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeamletDose_descriptor_;
}

const BeamletDose& BeamletDose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  return *default_instance_;
}

BeamletDose* BeamletDose::default_instance_ = NULL;

BeamletDose* BeamletDose::New() const {
  return new BeamletDose;
}

void BeamletDose::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BeamletDose*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dose_, index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeamletDose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFileGenerator.BeamletDose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_Dose;
        break;
      }

      // optional double Dose = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_Dose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dose_)));
          set_has_dose();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFileGenerator.BeamletDose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFileGenerator.BeamletDose)
  return false;
#undef DO_
}

void BeamletDose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFileGenerator.BeamletDose)
  // optional int32 Index = 1 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional double Dose = 2 [default = 0];
  if (has_dose()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->dose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFileGenerator.BeamletDose)
}

::google::protobuf::uint8* BeamletDose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFileGenerator.BeamletDose)
  // optional int32 Index = 1 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional double Dose = 2 [default = 0];
  if (has_dose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->dose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFileGenerator.BeamletDose)
  return target;
}

int BeamletDose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional double Dose = 2 [default = 0];
    if (has_dose()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeamletDose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeamletDose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeamletDose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeamletDose::MergeFrom(const BeamletDose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_dose()) {
      set_dose(from.dose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeamletDose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamletDose::CopyFrom(const BeamletDose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamletDose::IsInitialized() const {

  return true;
}

void BeamletDose::Swap(BeamletDose* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(dose_, other->dose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeamletDose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeamletDose_descriptor_;
  metadata.reflection = BeamletDose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DoseToPointsData::kFileGUIDFieldNumber;
const int DoseToPointsData::kStructuresFieldNumber;
const int DoseToPointsData::kBeamsFieldNumber;
const int DoseToPointsData::kPointsFieldNumber;
const int DoseToPointsData::kBeamletsFieldNumber;
const int DoseToPointsData::kPointDosesFieldNumber;
#endif  // !_MSC_VER

DoseToPointsData::DoseToPointsData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFileGenerator.DoseToPointsData)
}

void DoseToPointsData::InitAsDefaultInstance() {
}

DoseToPointsData::DoseToPointsData(const DoseToPointsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFileGenerator.DoseToPointsData)
}

void DoseToPointsData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fileguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DoseToPointsData::~DoseToPointsData() {
  // @@protoc_insertion_point(destructor:ProtoFileGenerator.DoseToPointsData)
  SharedDtor();
}

void DoseToPointsData::SharedDtor() {
  if (fileguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fileguid_;
  }
  if (this != default_instance_) {
  }
}

void DoseToPointsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DoseToPointsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DoseToPointsData_descriptor_;
}

const DoseToPointsData& DoseToPointsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  return *default_instance_;
}

DoseToPointsData* DoseToPointsData::default_instance_ = NULL;

DoseToPointsData* DoseToPointsData::New() const {
  return new DoseToPointsData;
}

void DoseToPointsData::Clear() {
  if (has_fileguid()) {
    if (fileguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      fileguid_->clear();
    }
  }
  structures_.Clear();
  beams_.Clear();
  points_.Clear();
  beamlets_.Clear();
  pointdoses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DoseToPointsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFileGenerator.DoseToPointsData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FileGUID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fileguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fileguid().data(), this->fileguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fileguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Structures;
        break;
      }

      // repeated .ProtoFileGenerator.Structure Structures = 2;
      case 2: {
        if (tag == 18) {
         parse_Structures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_structures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Structures;
        if (input->ExpectTag(26)) goto parse_Beams;
        break;
      }

      // repeated .ProtoFileGenerator.Beam Beams = 3;
      case 3: {
        if (tag == 26) {
         parse_Beams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Beams;
        if (input->ExpectTag(34)) goto parse_Points;
        break;
      }

      // repeated .ProtoFileGenerator.Point Points = 4;
      case 4: {
        if (tag == 34) {
         parse_Points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Points;
        if (input->ExpectTag(42)) goto parse_Beamlets;
        break;
      }

      // repeated .ProtoFileGenerator.Beamlet Beamlets = 5;
      case 5: {
        if (tag == 42) {
         parse_Beamlets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beamlets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Beamlets;
        if (input->ExpectTag(50)) goto parse_PointDoses;
        break;
      }

      // repeated .ProtoFileGenerator.PointDose PointDoses = 6;
      case 6: {
        if (tag == 50) {
         parse_PointDoses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointdoses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_PointDoses;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFileGenerator.DoseToPointsData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFileGenerator.DoseToPointsData)
  return false;
#undef DO_
}

void DoseToPointsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFileGenerator.DoseToPointsData)
  // optional string FileGUID = 1;
  if (has_fileguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileguid().data(), this->fileguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fileguid(), output);
  }

  // repeated .ProtoFileGenerator.Structure Structures = 2;
  for (int i = 0; i < this->structures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->structures(i), output);
  }

  // repeated .ProtoFileGenerator.Beam Beams = 3;
  for (int i = 0; i < this->beams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->beams(i), output);
  }

  // repeated .ProtoFileGenerator.Point Points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->points(i), output);
  }

  // repeated .ProtoFileGenerator.Beamlet Beamlets = 5;
  for (int i = 0; i < this->beamlets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->beamlets(i), output);
  }

  // repeated .ProtoFileGenerator.PointDose PointDoses = 6;
  for (int i = 0; i < this->pointdoses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pointdoses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFileGenerator.DoseToPointsData)
}

::google::protobuf::uint8* DoseToPointsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFileGenerator.DoseToPointsData)
  // optional string FileGUID = 1;
  if (has_fileguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fileguid().data(), this->fileguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fileguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fileguid(), target);
  }

  // repeated .ProtoFileGenerator.Structure Structures = 2;
  for (int i = 0; i < this->structures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->structures(i), target);
  }

  // repeated .ProtoFileGenerator.Beam Beams = 3;
  for (int i = 0; i < this->beams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->beams(i), target);
  }

  // repeated .ProtoFileGenerator.Point Points = 4;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->points(i), target);
  }

  // repeated .ProtoFileGenerator.Beamlet Beamlets = 5;
  for (int i = 0; i < this->beamlets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->beamlets(i), target);
  }

  // repeated .ProtoFileGenerator.PointDose PointDoses = 6;
  for (int i = 0; i < this->pointdoses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pointdoses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFileGenerator.DoseToPointsData)
  return target;
}

int DoseToPointsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FileGUID = 1;
    if (has_fileguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fileguid());
    }

  }
  // repeated .ProtoFileGenerator.Structure Structures = 2;
  total_size += 1 * this->structures_size();
  for (int i = 0; i < this->structures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->structures(i));
  }

  // repeated .ProtoFileGenerator.Beam Beams = 3;
  total_size += 1 * this->beams_size();
  for (int i = 0; i < this->beams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beams(i));
  }

  // repeated .ProtoFileGenerator.Point Points = 4;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  // repeated .ProtoFileGenerator.Beamlet Beamlets = 5;
  total_size += 1 * this->beamlets_size();
  for (int i = 0; i < this->beamlets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beamlets(i));
  }

  // repeated .ProtoFileGenerator.PointDose PointDoses = 6;
  total_size += 1 * this->pointdoses_size();
  for (int i = 0; i < this->pointdoses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointdoses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DoseToPointsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DoseToPointsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DoseToPointsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DoseToPointsData::MergeFrom(const DoseToPointsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  structures_.MergeFrom(from.structures_);
  beams_.MergeFrom(from.beams_);
  points_.MergeFrom(from.points_);
  beamlets_.MergeFrom(from.beamlets_);
  pointdoses_.MergeFrom(from.pointdoses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fileguid()) {
      set_fileguid(from.fileguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DoseToPointsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DoseToPointsData::CopyFrom(const DoseToPointsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoseToPointsData::IsInitialized() const {

  return true;
}

void DoseToPointsData::Swap(DoseToPointsData* other) {
  if (other != this) {
    std::swap(fileguid_, other->fileguid_);
    structures_.Swap(&other->structures_);
    beams_.Swap(&other->beams_);
    points_.Swap(&other->points_);
    beamlets_.Swap(&other->beamlets_);
    pointdoses_.Swap(&other->pointdoses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DoseToPointsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DoseToPointsData_descriptor_;
  metadata.reflection = DoseToPointsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kIndexFieldNumber;
const int Point::kStructureIdFieldNumber;
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFileGenerator.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFileGenerator.Point)
}

void Point::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  structureid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:ProtoFileGenerator.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (structureid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete structureid_;
  }
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(x_, index_);
    if (has_structureid()) {
      if (structureid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        structureid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFileGenerator.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_StructureId;
        break;
      }

      // optional string StructureId = 2;
      case 2: {
        if (tag == 18) {
         parse_StructureId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_structureid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->structureid().data(), this->structureid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "structureid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_X;
        break;
      }

      // optional double X = 3 [default = 0];
      case 3: {
        if (tag == 25) {
         parse_X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_Y;
        break;
      }

      // optional double Y = 4 [default = 0];
      case 4: {
        if (tag == 33) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_Z;
        break;
      }

      // optional double Z = 5 [default = 0];
      case 5: {
        if (tag == 41) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFileGenerator.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFileGenerator.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFileGenerator.Point)
  // optional int32 Index = 1 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional string StructureId = 2;
  if (has_structureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->structureid().data(), this->structureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "structureid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->structureid(), output);
  }

  // optional double X = 3 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // optional double Y = 4 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // optional double Z = 5 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFileGenerator.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFileGenerator.Point)
  // optional int32 Index = 1 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional string StructureId = 2;
  if (has_structureid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->structureid().data(), this->structureid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "structureid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->structureid(), target);
  }

  // optional double X = 3 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // optional double Y = 4 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // optional double Z = 5 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFileGenerator.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional string StructureId = 2;
    if (has_structureid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->structureid());
    }

    // optional double X = 3 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double Y = 4 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double Z = 5 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_structureid()) {
      set_structureid(from.structureid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(structureid_, other->structureid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointDose::kIndexFieldNumber;
const int PointDose::kBeamletDosesFieldNumber;
#endif  // !_MSC_VER

PointDose::PointDose()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFileGenerator.PointDose)
}

void PointDose::InitAsDefaultInstance() {
}

PointDose::PointDose(const PointDose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFileGenerator.PointDose)
}

void PointDose::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointDose::~PointDose() {
  // @@protoc_insertion_point(destructor:ProtoFileGenerator.PointDose)
  SharedDtor();
}

void PointDose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointDose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointDose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointDose_descriptor_;
}

const PointDose& PointDose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  return *default_instance_;
}

PointDose* PointDose::default_instance_ = NULL;

PointDose* PointDose::New() const {
  return new PointDose;
}

void PointDose::Clear() {
  index_ = 0;
  beamletdoses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointDose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFileGenerator.PointDose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BeamletDoses;
        break;
      }

      // repeated .ProtoFileGenerator.BeamletDose BeamletDoses = 2;
      case 2: {
        if (tag == 18) {
         parse_BeamletDoses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beamletdoses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BeamletDoses;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFileGenerator.PointDose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFileGenerator.PointDose)
  return false;
#undef DO_
}

void PointDose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFileGenerator.PointDose)
  // optional int32 Index = 1 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated .ProtoFileGenerator.BeamletDose BeamletDoses = 2;
  for (int i = 0; i < this->beamletdoses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->beamletdoses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFileGenerator.PointDose)
}

::google::protobuf::uint8* PointDose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFileGenerator.PointDose)
  // optional int32 Index = 1 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated .ProtoFileGenerator.BeamletDose BeamletDoses = 2;
  for (int i = 0; i < this->beamletdoses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->beamletdoses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFileGenerator.PointDose)
  return target;
}

int PointDose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  // repeated .ProtoFileGenerator.BeamletDose BeamletDoses = 2;
  total_size += 1 * this->beamletdoses_size();
  for (int i = 0; i < this->beamletdoses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beamletdoses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointDose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointDose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointDose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointDose::MergeFrom(const PointDose& from) {
  GOOGLE_CHECK_NE(&from, this);
  beamletdoses_.MergeFrom(from.beamletdoses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointDose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointDose::CopyFrom(const PointDose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointDose::IsInitialized() const {

  return true;
}

void PointDose::Swap(PointDose* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    beamletdoses_.Swap(&other->beamletdoses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointDose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointDose_descriptor_;
  metadata.reflection = PointDose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Structure::kIdFieldNumber;
const int Structure::kPointsDistanceCMFieldNumber;
const int Structure::kStartPointIndexFieldNumber;
const int Structure::kEndPointIndexFieldNumber;
#endif  // !_MSC_VER

Structure::Structure()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoFileGenerator.Structure)
}

void Structure::InitAsDefaultInstance() {
}

Structure::Structure(const Structure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoFileGenerator.Structure)
}

void Structure::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pointsdistancecm_ = 0;
  startpointindex_ = 0;
  endpointindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Structure::~Structure() {
  // @@protoc_insertion_point(destructor:ProtoFileGenerator.Structure)
  SharedDtor();
}

void Structure::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void Structure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Structure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Structure_descriptor_;
}

const Structure& Structure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dose_2dto_2dpoints_2ddata_2eproto();
  return *default_instance_;
}

Structure* Structure::default_instance_ = NULL;

Structure* Structure::New() const {
  return new Structure;
}

void Structure::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Structure*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(pointsdistancecm_, endpointindex_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Structure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoFileGenerator.Structure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_pointsDistanceCM;
        break;
      }

      // optional double pointsDistanceCM = 2 [default = 0];
      case 2: {
        if (tag == 17) {
         parse_pointsDistanceCM:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pointsdistancecm_)));
          set_has_pointsdistancecm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_StartPointIndex;
        break;
      }

      // optional int32 StartPointIndex = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_StartPointIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpointindex_)));
          set_has_startpointindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EndPointIndex;
        break;
      }

      // optional int32 EndPointIndex = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_EndPointIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endpointindex_)));
          set_has_endpointindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoFileGenerator.Structure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoFileGenerator.Structure)
  return false;
#undef DO_
}

void Structure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoFileGenerator.Structure)
  // optional string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional double pointsDistanceCM = 2 [default = 0];
  if (has_pointsdistancecm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pointsdistancecm(), output);
  }

  // optional int32 StartPointIndex = 3 [default = 0];
  if (has_startpointindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->startpointindex(), output);
  }

  // optional int32 EndPointIndex = 4 [default = 0];
  if (has_endpointindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endpointindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoFileGenerator.Structure)
}

::google::protobuf::uint8* Structure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoFileGenerator.Structure)
  // optional string Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional double pointsDistanceCM = 2 [default = 0];
  if (has_pointsdistancecm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pointsdistancecm(), target);
  }

  // optional int32 StartPointIndex = 3 [default = 0];
  if (has_startpointindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->startpointindex(), target);
  }

  // optional int32 EndPointIndex = 4 [default = 0];
  if (has_endpointindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endpointindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoFileGenerator.Structure)
  return target;
}

int Structure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional double pointsDistanceCM = 2 [default = 0];
    if (has_pointsdistancecm()) {
      total_size += 1 + 8;
    }

    // optional int32 StartPointIndex = 3 [default = 0];
    if (has_startpointindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startpointindex());
    }

    // optional int32 EndPointIndex = 4 [default = 0];
    if (has_endpointindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endpointindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Structure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Structure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Structure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Structure::MergeFrom(const Structure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pointsdistancecm()) {
      set_pointsdistancecm(from.pointsdistancecm());
    }
    if (from.has_startpointindex()) {
      set_startpointindex(from.startpointindex());
    }
    if (from.has_endpointindex()) {
      set_endpointindex(from.endpointindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Structure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Structure::CopyFrom(const Structure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Structure::IsInitialized() const {

  return true;
}

void Structure::Swap(Structure* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(pointsdistancecm_, other->pointsdistancecm_);
    std::swap(startpointindex_, other->startpointindex_);
    std::swap(endpointindex_, other->endpointindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Structure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Structure_descriptor_;
  metadata.reflection = Structure_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoFileGenerator

// @@protoc_insertion_point(global_scope)
